{
  "_args": [
    [
      {
        "raw": "generic-slice@~0.0.0",
        "scope": null,
        "escapedName": "generic-slice",
        "name": "generic-slice",
        "rawSpec": "~0.0.0",
        "spec": ">=0.0.0 <0.1.0",
        "type": "range"
      },
      "/Users/tolis/devit/thess-web-workshop/node_modules/fuse-vertices"
    ]
  ],
  "_from": "generic-slice@>=0.0.0 <0.1.0",
  "_id": "generic-slice@0.0.1",
  "_inCache": true,
  "_location": "/generic-slice",
  "_npmUser": {
    "name": "mikolalysenko",
    "email": "mikolalysenko@gmail.com"
  },
  "_npmVersion": "1.2.17",
  "_phantomChildren": {},
  "_requested": {
    "raw": "generic-slice@~0.0.0",
    "scope": null,
    "escapedName": "generic-slice",
    "name": "generic-slice",
    "rawSpec": "~0.0.0",
    "spec": ">=0.0.0 <0.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/fuse-vertices"
  ],
  "_resolved": "https://registry.npmjs.org/generic-slice/-/generic-slice-0.0.1.tgz",
  "_shasum": "4fc653bcb69ddfa131c182b59c91306a39c3e38c",
  "_shrinkwrap": null,
  "_spec": "generic-slice@~0.0.0",
  "_where": "/Users/tolis/devit/thess-web-workshop/node_modules/fuse-vertices",
  "author": {
    "name": "Mikola Lysenko"
  },
  "bugs": {
    "url": "https://github.com/mikolalysenko/generic-slice/issues"
  },
  "dependencies": {
    "sliced": "~0.0.5"
  },
  "description": "Array.prototype.slice.call()-like method for TypedArrays, Buffers and Arguments",
  "devDependencies": {
    "tap": "~0.4.1"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "4fc653bcb69ddfa131c182b59c91306a39c3e38c",
    "tarball": "https://registry.npmjs.org/generic-slice/-/generic-slice-0.0.1.tgz"
  },
  "gitHead": "a8b2dcc561d24036ce59fd045f1e278e627e0d76",
  "homepage": "https://github.com/mikolalysenko/generic-slice#readme",
  "keywords": [
    "slice",
    "typed",
    "array",
    "Float32Array",
    "Int32Array",
    "Float64Array",
    "Int8Array",
    "Int16Array",
    "Buffer",
    "copy",
    "view",
    "shared",
    "memory",
    "subarray"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mikolalysenko",
      "email": "mikolalysenko@gmail.com"
    }
  ],
  "name": "generic-slice",
  "optionalDependencies": {},
  "readme": "generic-slice\n=============\nA poly fill for [`slice`](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/slice) that uniformly and efficiently implements `Array`-like semantics for the following classses of objects:\n\n* Typed Arrays\n* Node.JS-style `Buffers()`\n* Regular JS Arrays\n* Arguments\n* Any other array-like object (ie has a length and array accessors)\n\n## Install\n\n    npm install generic-slice\n    \n## Example\n\n```javascript\nvar slice = require(\"generic-slice\")\n\nvar x = new Float32Array(4)\nx[0] = 1\nx[1] = 2\nx[2] = 3\nx[3] = 4\n\nvar y = slice(x, 0, 2)\n\n// Now:\n//      y = [ 1, 2 ]\n//      x = [ 1, 2, 3, 4 ]\n\n\ny[0] = 1000\n\n// Now:\n//      y = [ 1000, 2 ]\n//      x = [ 1, 2, 3, 4 ]\n```\n\n### `require(\"generic-slice\")(array[, sliceBegin, sliceEnd])`\nA generic polyfill for slicing array-like objects.\n\n* `array` is a typed array, buffer, Array, or Arguments object\n* `sliceBegin` is an optional argument giving the start of the slice. Negative values change counting to end of array.  (Default: 0)\n* `sliceEnd` is an optional argument giving the end of the slice.  Negative values wrap around.  (Default: array.length)\n\n**Returns** A copy of the array from the range `[sliceBegin, sliceEnd)`\n\n### Why make this?\nBecause:\n\n* `slice` got dropped from the typed array specification (and the replacement method, `.subarray()` merely returns a view and does not make a copy)\n* Node.JS's `Buffer`'s slice method does not make a copy like Array's slice does, and so it has inconsistent semantics.\n* `Arguments` doesn't have a slice method either\n* Using `Array.prototype.slice.call` doesn't properly preserve the types of things like Buffers or typed arrays\n* Also `Array.prototype.slice.call` can be slower than an appropriate implementation.  For example, to clone a typed array you can slice the underlying ArrayBuffer assuming that you are careful about how you perform indexing.\n\n### Is it thoroughly tested?\n\nAll of the major edge cases should be tested.  If you find a bug, please open an issue or send a pull request.\n\n# Credits\n(c) 2013 Mikola Lysenko. MIT License\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/generic-slice.git"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "version": "0.0.1"
}
