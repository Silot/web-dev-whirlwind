{
  "_args": [
    [
      {
        "raw": "vectors@^0.1.0",
        "scope": null,
        "escapedName": "vectors",
        "name": "vectors",
        "rawSpec": "^0.1.0",
        "spec": ">=0.1.0 <0.2.0",
        "type": "range"
      },
      "/Users/tolis/devit/thess-web-workshop/node_modules/icosphere"
    ]
  ],
  "_from": "vectors@>=0.1.0 <0.2.0",
  "_id": "vectors@0.1.0",
  "_inCache": true,
  "_location": "/vectors",
  "_npmUser": {
    "name": "hughsk",
    "email": "hughskennedy@gmail.com"
  },
  "_npmVersion": "1.2.18",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vectors@^0.1.0",
    "scope": null,
    "escapedName": "vectors",
    "name": "vectors",
    "rawSpec": "^0.1.0",
    "spec": ">=0.1.0 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/icosphere"
  ],
  "_resolved": "https://registry.npmjs.org/vectors/-/vectors-0.1.0.tgz",
  "_shasum": "503fbb9b804464126a88ea8ac7999251798ea854",
  "_shrinkwrap": null,
  "_spec": "vectors@^0.1.0",
  "_where": "/Users/tolis/devit/thess-web-workshop/node_modules/icosphere",
  "author": {
    "name": "Hugh Kennedy",
    "email": "hughskennedy@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/hughsk/vectors/issues"
  },
  "dependencies": {},
  "description": "A grab bag of vector utility functions for 2D and 3D vectors that operate on plain arrays",
  "devDependencies": {
    "emu": "0.0.2",
    "sourcecat": "~0.1.0",
    "tape": "~1.0.4"
  },
  "directories": {},
  "dist": {
    "shasum": "503fbb9b804464126a88ea8ac7999251798ea854",
    "tarball": "https://registry.npmjs.org/vectors/-/vectors-0.1.0.tgz"
  },
  "homepage": "https://github.com/hughsk/vectors#readme",
  "keywords": [
    "vectors",
    "math",
    "utility",
    "browserify"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "hughsk",
      "email": "hughskennedy@gmail.com"
    }
  ],
  "name": "vectors",
  "optionalDependencies": {},
  "readme": "# vectors\n[![Build Status](https://travis-ci.org/hughsk/vectors.png?branch=master)](https://travis-ci.org/hughsk/vectors)\n[![unstable](http://hughsk.github.io/stability-badges/dist/unstable.svg)](http://github.com/hughsk/stability-badges)\n\nA grab bag of vector utility functions for 2D and 3D vectors that\noperate on plain arrays. Much like [cog](http://ghub.io/cog),\neach method can be required individually to limit the amount of\nbloat you get from using the module on the client with\n[browserify](http://browserify.org).\n\n## Installation\n\n``` bash\nnpm install vectors\n```\n\n## Contributors\n\n* [hughsk](https://github.com/hughsk)\n* [shama](https://github.com/shama)\n\n## Usage\n\nEach method is requireable from `vectors/${method}`,\nfollowed by calling the returned generator function\nwith the number of dimensions you want your vectors to be.\ne.g.:\n\n``` javascript\nvar mag = require('vectors/mag')(2)\nvar add = require('vectors/add')(3)\nvar sub = require('vectors/sub')(3)\n```\n\nIf you want something totally generic, you can assume\nin most cases that appending `-nd` to your require\nwill return a less performant but more flexible function:\n\n``` javascript\nvar mag = require('vectors/mag-nd')\nvar add = require('vectors/add-nd')\nvar sub = require('vectors/sub-nd')\n```\n\nMost of the methods in this module support vectors of\narbitrary dimensions, but the ones that don't will throw\nan error to let you know.\n\nEach method takes a `vec` vector, which if returning a new\nvector will almost always do so by *modifying it directly*:\n\n``` javascript\nvar spd = [+1, 0]\nvar acc = [-1, 0]\nvar cop = copy(spd)\n\nmag(spd)      // 1\nadd(spd, acc) // spd === [0, 0]\nmag(spd)      // 0\nmag(cop)      // 1\n```\n\n### `add(vec, other[, ...])`\n\nAdds the `other` vector to `vec`:\n\n``` javascript\nvar add = require('vectors/add')(2)\nvar pos = [0, 0]\nvar spd = [1, 1.5]\n\nadd(pos, spd)\nadd(pos, spd)\n\nconsole.log(pos) // [2, 3]\n```\n\nOr add a scalar to the entire array:\n\n``` javascript\nvar res = add([1, 1, 1], 6)\nconsole.log(res) // [7, 7, 7]\n```\n\nYou can disable this by passing `scalars: false` to\nthe generator function for faster results:\n\n``` javascript\nvar add = require('vectors/add')(2, { scalars: false })\n```\n\n### `copy(vec)`\n\nReturns a copy of the vector `vec`:\n\n``` javascript\nvar copy = require('vectors/copy')(2)\nvar spd = [5, 5]\n\nvar cop = copy(spd)\nmult(spd, 100) === [100, 100]\ncop === [5, 5]\n```\n\n### `cross(vec, other)`\n\nReturns the cross product of vectors `vec` and `other`:\n\n``` javascript\nvar cross = require('vectors/cross')(2)\nvar a = [1, 2]\nvar b = [8, 4]\n\ncross(a, b) === -12\n```\n\nThis method only works in 2 and 3 dimensions.\n\n### `dist(vec, other)`\n\nReturns the distance between vectors `vec` and `other`:\n\n``` javascript\nvar dist = require('vectors/dist')(2)\nvar pos1 = [2, 4]\nvar pos2 = [4, 4]\n\ndist(pos1, pos2) === 2\n```\n\n### `div(vec, other[, ...])`\n\nDivides the vector `vec` by a `other` value:\n\n``` javascript\nvar div = require('vectors/div')(2)\nvar spd = [5, 5]\n\ndiv(spd, 2) === [2.5, 2.5]\n```\n\nOr divide multiple arrays from each other:\n\n``` javascript\nvar res = div([6, 6, 6], [2, 2, 2])\nconsole.log(res) // [3, 3, 3]\n```\n\nYou can disable this by passing `vectors: false` to\nthe generator function for faster results:\n\n``` javascript\nvar sub = require('vectors/div')(2, { vectors: false })\n```\n\n### `dot(vec, other)`\n\nReturns the dot product of vectors `vec` and `other`:\n\n``` javascript\nvar dot = require('vectors/dot')(2)\nvar vecA = [15, 5]\nvar vecB = [10, 8]\n\ndot(vecA, vecB) === 190\n```\n\n### `heading(vec, other)`\n\nMutliplies the vector `vec` by a `scalar` value:\n\n``` javascript\nvar heading = require('vectors/heading')(2)\nvar a = [5, 0]\nvar b = [0, 5]\n\nheading(a, b) * 180 / Math.PI === 45 // degrees\n```\n\n### `lerp(vec, start, finish, scalar)`\n\nSet `vec` to the linear interpolation between vectors `start`\nand `finish`:\n\n``` javascript\nvar lerp = require('vectors/lerp')(2)\nvar start = [0, 0]\nvar finish = [100, 100]\n\nlerp([], start, finish, 0.75) === [75, 75]\n```\n\n### `limit(vec, scalar)`\n\nLimits the vector `vec` to a magnitude of `scalar` units.\n\n``` javascript\nvar limit = require('vectors/limit')(2)\n\nlimit([3, 0], 2)  === [2, 0]\nlimit([3, 4], 1)  === [0.6, 0.8]\nlimit([5, 5], 24) === [5, 5]\n```\n\n### `mag(vec)`\n\nReturns the magnitude of the vector:\n\n``` javascript\nvar mag = require('vectors/mag')(2)\nvar spd = [2, 4]\n\nmag(spd) === 4.47213595499958\n```\n\n### `mult(vec, other[, ...])`\n\nMutliplies the vector `vec` by a `other` value:\n\n``` javascript\nvar mult = require('vectors/mult')(2)\nvar spd = [5, 5]\n\nmult(spd, 2) === [10, 10]\n```\n\nOr multiply multiple arrays:\n\n``` javascript\nvar res = mult([2, 2, 2], [4, 4, 4])\nconsole.log(res) // [8, 8, 8]\n```\n\nYou can disable this by passing `vectors: false` to\nthe generator function for faster results:\n\n``` javascript\nvar sub = require('vectors/mult')(2, { vectors: false })\n```\n\n### `normalize(vec, scalar)`\n\nNormalizes the vector (i.e. scales it to make its\ndistance 1 unit).\n\n``` javascript\nvar normalize = require('vectors/normalize')(2)\n\nnormalize([3, 0])  === [1, 0]\nnormalize([4, 3])  === [0.8, 0.6]\n```\n\n### `sub(vec, other[, ...])`\n\nSubtracts the `other` vector from `vec`:\n\n``` javascript\nvar sub = require('vectors/sub')(2)\nvar pos = [0, 0]\nvar spd = [1, 1.5]\n\nsub(pos, spd)\nsub(pos, spd)\n\nconsole.log(pos) // [-2, -3]\n```\n\nOr subtract a scalar from the entire array:\n\n``` javascript\nvar res = sub([9, 8, 7], 6)\nconsole.log(res) // [3, 2, 1]\n```\n\nYou can disable this by passing `scalars: false` to\nthe generator function for faster results:\n\n``` javascript\nvar sub = require('vectors/sub')(2, { scalars: false })\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hughsk/vectors.git"
  },
  "scripts": {
    "test": "node test.js"
  },
  "version": "0.1.0"
}
